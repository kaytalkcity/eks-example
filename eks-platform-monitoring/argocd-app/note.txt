Step 1: Push the deployment folder to git repo 


git init
git add -a
git commit -m "eks self managed monitoring"
git push -u origin main


Step2 : Deploy Prometheus 
cd argocd-app/
kubectl apply -f ./prometheus.yaml

or 

argocd app create prometheus --repo https://github.com/<GITHUB_USERNAME>/<REPO NAME>.git --path prometheus --dest-server https://kubernetes.default.svc
argocd app get prometheus
argocd app sync prometheus

** Please be patient while the chart is being deployed **

prometheus service DNS name : kube-prometheus-prometheus.monitoring.svc.cluster.local

To access Prometheus from outside the cluster execute the following commands:

echo "Prometheus URL: http://127.0.0.1:9090/"
kubectl port-forward --namespace monitoring svc/[KUBE-PROMETHEUS-SERVICE-NAME] 9090:9090

Step 3: Deploy Grafana datasource 

kubectl apply -f ./grafana-datasource.yaml

or 

argocd app create grafana-datastore --repo https://github.com/<GITHUB_USERNAME>/<REPO NAME>.git --path grafana-datastore --dest-server https://kubernetes.default.svc
argocd app get grafana-datastore
argocd app sync grafana-datastore


Step 4: Deploy Grafana

kubectl apply -f ./grafana.yaml
 
or 

argocd app create grafana --repo https://github.com/<GITHUB_USERNAME>/<REPO NAME>.git --path grafana --dest-server https://kubernetes.default.svc
argocd app get grafana
argocd app sync grafana
 
 

** Please be patient while the chart is being deployed **

Get the application URL by running these commands:

echo "Browse to http://127.0.0.1:8080"
kubectl port-forward -n monitoring svc/[GRAFANA-SERVICE-NAME] 8089:80
    
    
3. Grafana login credential
echo "User: admin"
echo "Password: $(kubectl get secret grafana-prod --namespace monitoring -o jsonpath="{.data.admin-password}" | base64 --decode)"





3. Configure the application and link to the git repo created in 2


argocd app create eks-self-managed-prometheus --repo https://github.com/<GITHUB_USERNAME>/<REPO NAME>.git --path eks-self-managed-prometheus --dest-server https://kubernetes.default.svc
argocd app get eks-self-managed-prometheus
argocd app sync eks-self-managed-prometheus


eks-self-managed-grafana
argocd app create eks-self-managed-grafana --repo https://github.com/<GITHUB_USERNAME>/<REPO NAME>.git --path eks-self-managed-grafana --dest-server https://kubernetes.default.svc
argocd app get eks-self-managed-grafana
argocd app sync eks-self-managed-grafana



Argocd 
1. Expose server

    kubectl port-forward -n argocd svc/argocd 8080:80
    
2. Login
export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
echo $ARGOCD_SERVER

#The initial password is autogenerated with the pod name of the ArgoCD API server:

export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
 
 

3. Using admin as login and the autogenerated password:
#You should get as an output:
#'admin' logged in successfully

argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure


#Create application
4. Connect with ArgoCD CLI using our cluster context:

CONTEXT_NAME=`kubectl config view -o jsonpath='{.current-context}'`
argocd cluster add $CONTEXT_NAME